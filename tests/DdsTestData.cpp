/*	DdsTestData.cpp

MIT License

Copyright (c) 2019 Fabian Herb

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#include "DdsTestData.h"

namespace DdsTestData
{
const uint8_t ddsDxt1[160] = {
		0x44, 0x44, 0x53, 0x20, // magic
		// header
		0x7c, 0x00, 0x00, 0x00, // size = 124
		0x07, 0x10, 0x0a, 0x00, // flags = kCaps | kWidth | kHeight | kPixelformat | kMipmapCount | kLinearSize
		0x08, 0x00, 0x00, 0x00, // height = 8
		0x08, 0x00, 0x00, 0x00, // width = 8
		0x20, 0x00, 0x00, 0x00, // pitchOrLinearSize = 32
		0x00, 0x00, 0x00, 0x00, // depth = 0
		0x01, 0x00, 0x00, 0x00, // mipMapCount = 1
		0x00, 0x00, 0x00, 0x00, // reserved1[0] = 0
		0x00, 0x00, 0x00, 0x00, // reserved1[1] = 0
		0x00, 0x00, 0x00, 0x00, // reserved1[2] = 0
		0x00, 0x00, 0x00, 0x00, // reserved1[3] = 0
		0x00, 0x00, 0x00, 0x00, // reserved1[4]
		0x00, 0x00, 0x00, 0x00, // reserved1[5]
		0x00, 0x00, 0x00, 0x00, // reserved1[6]
		0x00, 0x00, 0x00, 0x00, // reserved1[7]
		0x00, 0x00, 0x00, 0x00, // reserved1[8]
		0x00, 0x00, 0x00, 0x00, // reserved1[9]
		0x00, 0x00, 0x00, 0x00, // reserved1[10]
		0x20, 0x00, 0x00, 0x00, // pixelFormat.size = 32
		0x04, 0x00, 0x00, 0x00, // pixelFormat.flags = kFourCc
		0x44, 0x58, 0x54, 0x31, // pixelFormat.fourCC = "DXT1"
		0x00, 0x00, 0x00, 0x00, // pixelFormat.rgbBitCount = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.rBitMask = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.gBitMask = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.bBitMask = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.aBitMask = 0
		0x08, 0x10, 0x40, 0x00, // caps = kComplex | kMipmap | kTexture
		0x00, 0x00, 0x00, 0x00, // caps2
		0x00, 0x00, 0x00, 0x00, // caps3
		0x00, 0x00, 0x00, 0x00, // caps4
		0x00, 0x00, 0x00, 0x00, // reserved2
		// Data (32 Bytes):
		0x00, 0x00, 0xf9, 0xff,
		0x11, 0x44, 0x11, 0x44,
		0xfc, 0xe7, 0x40, 0x00,
		0x04, 0x11, 0x44, 0x12,
		0x00, 0x28, 0xff, 0xff,
		0x11, 0x44, 0x11, 0x46,
		0x04, 0x00, 0xff, 0xff,
		0x10, 0x44, 0x11, 0x84
};

const uint8_t ddsRgb[] = {
	0x44, 0x44, 0x53, 0x20, // magic
	0x7c, 0x00, 0x00, 0x00, // header size
	0x0f, 0x10, 0x02, 0x00, // flags =
	0x08, 0x00, 0x00, 0x00, // height = 8
	0x08, 0x00, 0x00, 0x00, // width = 8
	0x18, 0x00, 0x00, 0x00, // pitchOrLinearSize = 24
	0x00, 0x00, 0x00, 0x00, // depth = 0
	0x01, 0x00, 0x00, 0x00, // mipMapCount = 1
	0x00, 0x00, 0x00, 0x00, // reserved1[0]
	0x00, 0x00, 0x00, 0x00, // reserved1[1]
	0x00, 0x00, 0x00, 0x00, // reserved1[2]
	0x00, 0x00, 0x00, 0x00, // reserved1[3]
	0x00, 0x00, 0x00, 0x00, // reserved1[4]
	0x00, 0x00, 0x00, 0x00, // reserved1[5]
	0x00, 0x00, 0x00, 0x00, // reserved1[6]
	0x00, 0x00, 0x00, 0x00, // reserved1[7]
	0x00, 0x00, 0x00, 0x00, // reserved1[8]
	0x00, 0x00, 0x00, 0x00, // reserved1[9]
	0x00, 0x00, 0x00, 0x00, // reserved1[10]
	0x20, 0x00, 0x00, 0x00, // pixelFormat.size = 32
	0x40, 0x00, 0x00, 0x00, // pixelFormat.flags = kRgb
	0x00, 0x00, 0x00, 0x00, // pixelFormat.fourCC = 0
	0x18, 0x00, 0x00, 0x00, // pixelFormat.rgbBitCount = 24
	0x00, 0x00, 0xff, 0x00, // pixelFormat.rBitMask
	0x00, 0xff, 0x00, 0x00, // pixelFormat.gBitMask
	0xff, 0x00, 0x00, 0x00, // pixelFormat.bBitMask
	0x00, 0x00, 0x00, 0x00, // pixelFormat.aBitMask
	0x08, 0x10, 0x40, 0x00, // caps = kComplex | kMipmap | kTexture
	0x00, 0x00, 0x00, 0x00, // caps2
	0x00, 0x00, 0x00, 0x00, // caps3
	0x00, 0x00, 0x00, 0x00, // caps4
	0x00, 0x00, 0x00, 0x00, // reserved2
	// Data (8 * 8 * 3 = 192 bytes):
	0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0xff, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,	0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,	0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
	0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x80, 0x80
};

const uint8_t ddsBct1[180] = {
		0x44, 0x44, 0x53, 0x20, // magic
		// header
		0x7c, 0x00, 0x00, 0x00, // header size
		0x06, 0x00, 0x00, 0x00, // flags = kHeight | kWidth
		0x08, 0x00, 0x00, 0x00, // height = 8
		0x08, 0x00, 0x00, 0x00, // width = 8
		0x10, 0x00, 0x00, 0x00, // pitchOrLinearSize = 16
		0x00, 0x00, 0x00, 0x00, // depth
		0x01, 0x00, 0x00, 0x00, // mipMapCount = 1
		0x00, 0x00, 0x00, 0x00, // reserved1[0]
		0x00, 0x00, 0x00, 0x00, // reserved1[1]
		0x00, 0x00, 0x00, 0x00, // reserved1[2]
		0x00, 0x00, 0x00, 0x00, // reserved1[3]
		0x00, 0x00, 0x00, 0x00, // reserved1[4]
		0x00, 0x00, 0x00, 0x00, // reserved1[5]
		0x00, 0x00, 0x00, 0x00, // reserved1[6]
		0x00, 0x00, 0x00, 0x00, // reserved1[7]
		0x00, 0x00, 0x00, 0x00, // reserved1[8]
		0x00, 0x00, 0x00, 0x00, // reserved1[9]
		0x00, 0x00, 0x00, 0x00, // reserved1[10]
		0x20, 0x00, 0x00, 0x00, // pixelFormat.size = 32
		0x04, 0x00, 0x00, 0x00, // pixelFormat.flags = kFourCc
		0x44, 0x58, 0x31, 0x30, // pixelFormat.fourCC = "DX10"
		0x00, 0x00, 0x00, 0x00, // pixelFormat.rgbBitCount = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.rBitMask = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.gBitMask = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.bBitMask = 0
		0x00, 0x00, 0x00, 0x00, // pixelFormat.aBitMask = 0
		0x00, 0x10, 0x00, 0x00, // caps = kTexture
		0x00, 0x00, 0x00, 0x00, // caps2
		0x00, 0x00, 0x00, 0x00, // caps3
		0x00, 0x00, 0x00, 0x00, // caps4
		0x00, 0x00, 0x00, 0x00, // reserved2

		// DX10 header
		0x47, 0x00, 0x00, 0x00, // dxgiFormat = DXGI_FORMAT_BC1_UNORM
		0x03, 0x00, 0x00, 0x00, // resourceDimension = DDS_DIMENSION_TEXTURE2D
		0x00, 0x00, 0x00, 0x00, // miscFlag = 0
		0x01, 0x00, 0x00, 0x00, // arraySize = 1
		0x00, 0x00, 0x00, 0x00, // reserved

		// Data (32 Bytes)
		0x00, 0x00, 0xf9, 0xff,
		0x11, 0x44, 0x11, 0x44,
		0xfc, 0xe7, 0x40, 0x00,
		0x04, 0x11, 0x44, 0x12,
		0x00, 0x28, 0xff, 0xff,
		0x11, 0x44, 0x11, 0x46,
		0x04, 0x00, 0xff, 0xff,
		0x10, 0x44, 0x11, 0x84
};

}
