/*	KtxTestData.cpp
	Copyright 2016 Fabian Herb

	This file is part of Molecular Engine.
*/

#include "KtxTestData.h"

namespace KtxTestData
{
const uint8_t exampleImage[596] =
{
	// HEADER
	0xAB, 0x4B, 0x54, 0x58, // first four bytes of Byte[12] identifier
	0x20, 0x31, 0x31, 0xBB, // next four bytes of Byte[12] identifier
	0x0D, 0x0A, 0x1A, 0x0A, // final four bytes of Byte[12] identifier
	0x01, 0x02, 0x03, 0x04, // Byte[4] endianess (Little endian in this case)
	0x00, 0x00, 0x00, 0x00, // UInt32 glType = 0
	0x01, 0x00, 0x00, 0x00, // UInt32 glTypeSize = 1
	0x00, 0x00, 0x00, 0x00, // UInt32 glFormat = 0
	0x64, 0x8d, 0x00, 0x00, // UInt32 glInternalFormat = GL_ETC1_RGB8_OES
	0x07, 0x19, 0x00, 0x00, // UInt32 glBaseInternalFormat = GL_RGB
	0x20, 0x00, 0x00, 0x00, // UInt32 pixelWidth = 32
	0x20, 0x00, 0x00, 0x00, // UInt32 pixelHeight = 32
	0x00, 0x00, 0x00, 0x00, // UInt32 pixelDepth = 0
	0x00, 0x00, 0x00, 0x00, // UInt32 numberOfArrayElements = 0
	0x01, 0x00, 0x00, 0x00, // UInt32 numberOfFaces = 1
	0x01, 0x00, 0x00, 0x00, // UInt32 numberOfMipmapLevels = 1
	0x10, 0x00, 0x00, 0x00, // UInt32 bytesOfKeyValueData = 16
	// METADATA
	0x00, 0x00, 0x00, 0x0A, // UInt32 keyAndValueByteSize = 10
	0x61, 0x70, 0x69, 0x00, // UTF8 key:   'api\0'
	0x6A, 0x6F, 0x6B, 0x65, // UTF8 v: 'gles2\0'
	0x32, 0x00, 0x00, 0x00, // Byte[2] valuePadding (2 bytes)
	// TEXTURE DATA
	0x00, 0x02, 0x00, 0x00, // UInt32 imageSize = 512 bytes
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
	0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA, 0xD8, 0xD8, 0xD8, 0xDA,
};

const uint8_t exampleImageMipMaps[316] =
{
	/*  0 */ 0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a, // Identifier
	/* 12 */ 0x01, 0x02, 0x03, 0x04, // Endianess
	/* 16 */ 0x00, 0x00, 0x00, 0x00,
	/* 20 */ 0x01, 0x00, 0x00, 0x00,
	/* 24 */ 0x00, 0x00, 0x00, 0x00,
	/* 28 */ 0x74, 0x92, 0x00, 0x00, // glInternalFormat
	/* 32 */ 0x07, 0x19, 0x00, 0x00, // glBaseInternalFormat = GL_RGB
	/* 36 */ 0x12, 0x00, 0x00, 0x00, // pixelWidth = 18
	/* 40 */ 0x10, 0x00, 0x00, 0x00, // pixelHeight = 16
	/* 44 */ 0x00, 0x00, 0x00, 0x00,
	/* 48 */ 0x00, 0x00, 0x00, 0x00,
	/* 52 */ 0x01, 0x00, 0x00, 0x00,
	/* 56 */ 0x05, 0x00, 0x00, 0x00, // numberOfMipmapLevels = 5
	/* 60 */ 0x00, 0x00, 0x00, 0x00, // bytesOfKeyValueData
	/* 64 */ 0xa0, 0x00, 0x00, 0x00, // imageSize = 160
	/* 68 */
	0xeb, 0x77, 0x97, 0x4b, 0x06, 0x40, 0x00, 0x20, 0xfb, 0xd8, 0x99, 0x9a, 0x77, 0xff, 0x44, 0x60,
	0x97, 0x96, 0x95, 0x17, 0x6e, 0xe6, 0x13, 0xbb, 0xfb, 0xd8, 0x99, 0x97, 0x77, 0xff, 0x64, 0xc4,
	0x86, 0x86, 0x85, 0x39, 0x88, 0x82, 0x33, 0x39, 0xa7, 0xa5, 0xa8, 0xe5, 0x2e, 0xa2, 0xdd, 0xdd,
	0xbe, 0xab, 0x71, 0xd0, 0x8c, 0xce, 0x08, 0x81, 0xa2, 0x06, 0x7e, 0x1b, 0xde, 0xff, 0xee, 0xff,
	0xfb, 0xc2, 0xfd, 0xaf, 0x00, 0x12, 0x00, 0x01, 0x06, 0x22, 0xc9, 0x1b, 0x77, 0x7c, 0x44, 0x4b,
	0xfb, 0xff, 0x77, 0x6a, 0xdd, 0x5d, 0x00, 0x80, 0xaa, 0xa9, 0xa6, 0xb4, 0x35, 0xdd, 0x69, 0x22,
	0x7e, 0x05, 0x7e, 0xc2, 0x00, 0x02, 0xff, 0xfd, 0x0c, 0x44, 0xfc, 0x3f, 0x9d, 0xff, 0x52, 0x00,
	0xfb, 0xd8, 0x55, 0x5e, 0x99, 0x97, 0xff, 0xf5, 0x14, 0x83, 0xbb, 0xbf, 0x32, 0x23, 0xfe, 0xef,
	0xce, 0xbb, 0x81, 0xd0, 0x88, 0xe3, 0x88, 0x8c, 0xaa, 0xf2, 0xe4, 0x8e, 0x13, 0x7f, 0x7e, 0xc8,
	0xfc, 0xca, 0x35, 0x39, 0xb3, 0xb5, 0x00, 0x86, 0x0c, 0x44, 0xc9, 0x2e, 0x66, 0x6c, 0x77, 0x7b,

	/* 228 */ 0x30, 0x00, 0x00, 0x00, // imageSize = 48
	/* 232 */
	0x4c, 0x0c, 0x75, 0x8e, 0xc0, 0x00, 0x88, 0xbb,	0xfb, 0xc3, 0x99, 0x8a, 0x13, 0x73, 0x20, 0x62,
	0x8b, 0x89, 0x81, 0x39, 0xaa, 0xaa, 0x11, 0x11, 0xac, 0xaa, 0x96, 0xd0, 0x92, 0x66, 0x10, 0x88,
	0x4b, 0xf2, 0x7e, 0x13, 0xe7, 0x37, 0xc3, 0xfe, 0x5c, 0x59, 0x42, 0x59, 0x99, 0x99, 0x22, 0x22,
	0x08, 0x00, 0x00, 0x00, // imageSize = 8
	0xf9, 0xa3, 0x99, 0x8b, 0x19, 0x57, 0x08, 0x09,
	0x08, 0x00, 0x00, 0x00, // imageSize = 8
	0x65, 0x05, 0xdd, 0x32, 0x11, 0x1f, 0xff, 0xf1,
	0x08, 0x00, 0x00, 0x00, // imageSize = 8
	0x5d, 0xa2, 0xf3, 0xde, 0xa2, 0xbd, 0xd4, 0x57
};

}
