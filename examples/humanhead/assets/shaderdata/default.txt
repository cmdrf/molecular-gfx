vertex
vec4 vertexPosition(attr vec4 vertexPositionAttr)
{
	vertexPosition = vertexPositionAttr;
}

vertex
vec3 vertexNormal(attr vec3 vertexNormalAttr)
{
	vertexNormal = vertexNormalAttr;
}

vertex
vec2 vertexUv0(attr vec2 vertexUv0Attr)
{
	vertexUv0 = vertexUv0Attr;
}

vertex
mat4 modelViewMatrix(mat4 viewMatrix, mat4 modelMatrix)
{
    modelViewMatrix = viewMatrix * modelMatrix;
}

fragment
out uint pickingOutput(uint pickingColor)
{
	pickingOutput = pickingColor;
}

fragment
vec3 diffuseColor(attr vec4 vertexColorAttr)
{
	diffuseColor = vertexColorAttr.rgb;
}

fragment
vec3 diffuseColor(attr vec4 vertexColorAttr, sampler2D diffuseTexture, vec2 vertexUv0)
{
	diffuseColor = vertexColorAttr.rgb * texture(diffuseTexture, vertexUv0).rgb;
}

fragment
vec3 emissionColor(sampler2D emissionTexture, vec2 vertexUv0, float emissionFactor)
{
	emissionColor = texture(emissionTexture, vertexUv0).rgb * emissionFactor;
}

fragment
vec3 emissionColor(sampler2D emissionTexture, vec2 vertexUv0)
{
	emissionColor = texture(emissionTexture, vertexUv0).rgb;
}

vertex
vec3 normal(mat4 modelMatrix, vec3 vertexNormal)
{
	normal = normalize((modelMatrix * vec4(vertexNormal, 0.0)).xyz);
}

vertex
out vec4 gl_Position(mat4 modelViewMatrix, mat4 projectionMatrix, vec4 vertexPosition)
{
    gl_Position = projectionMatrix * modelViewMatrix * vertexPosition;
}

vertex
out vec4 gl_Position(vec2 vertexUv0)
{
    /* Texture space */
	gl_Position = vec4(vertexUv0 * vec2(2.0, 2.0) + vec2(-1.0, -1.0), 0.0, 1.0);
}

vertex
out vec4 gl_Position(mat4 modelViewMatrix, mat4 projectionMatrix, attr vec4 skyVertexPositionAttr)
{
    gl_Position = (projectionMatrix * modelViewMatrix * skyVertexPositionAttr).xyww;
}

vertex
out float gl_PointSize(mat4 modelViewMatrix, mat4 projectionMatrix, float pointWorldSize, vec2 viewportSize, vec4 vertexPosition)
{
	vec4 _eyePos = modelViewMatrix * vec4(vertexPosition.x, vertexPosition.y, 0.5, 1);
	vec4 _projCorner = projectionMatrix * vec4(0.5 * pointWorldSize, 0.5 * pointWorldSize, _eyePos.z, _eyePos.w);
	gl_PointSize = viewportSize.x * _projCorner.x / _projCorner.w;
}

fragment
vec3 normal(sampler2D objectSpaceNormalTexture, mat4 modelMatrix, vec2 vertexUv0)
{
	vec3 _texNormal = texture(objectSpaceNormalTexture, vertexUv0).rgb * vec3(-2.0, 2.0, 2.0) - vec3(-1.0, 1.0, 1.0); // -Red?!
	normal = normalize((modelMatrix * vec4(-_texNormal, 0.0)).xyz);
}

fragment
out vec4 fragmentColor(vec3 diffuseLighting, vec3 diffuseColor, float opacity)
{
	fragmentColor = vec4(diffuseLighting * diffuseColor, opacity);
}

fragment
out vec4 fragmentColor(vec3 diffuseLighting, vec3 diffuseColor, vec3 specularLighting, vec3 specularColor, float opacity)
{
	fragmentColor = vec4(diffuseLighting * diffuseColor + specularLighting * specularColor, opacity);
}

fragment
out vec4 fragmentColor(vec3 diffuseColor, float opacity)
{
	fragmentColor = vec4(diffuseColor, opacity);
}

fragment
out vec4 fragmentColor(vec3 emissionColor, float opacity)
{
	fragmentColor = vec4(emissionColor, opacity);
}

fragment
float opacity(sampler2D diffuseAndOpacityTexture, vec2 vertexUv0)
{
	opacity = texture(diffuseAndOpacityTexture, vertexUv0).a;
}

fragment
vec3 diffuseColor(attr vec4 vertexColorAttr, sampler2D diffuseAndOpacityTexture, vec2 vertexUv0)
{
	diffuseColor = vertexColorAttr.rgb * texture(diffuseAndOpacityTexture , vertexUv0).rgb;
}

fragment
float opacity()
{
	opacity = 1.0;
}

fragment
float opacity(attr vec4 vertexColorAttr)
{
	opacity = vertexColorAttr.a;
}

fragment
vec3 specularColor()
{
	specularColor = vec3(1.0, 1.0, 1.0);
}

fragment
vec3 diffuseColor(sampler2D diffuseTexture, vec2 vertexUv0)
{
	diffuseColor = texture(diffuseTexture, vertexUv0).rgb;
}

fragment
vec3 specularColor(sampler2D specularColorTexture, vec2 vertexUv0)
{
	specularColor = texture(specularColorTexture, vertexUv0).rgb;
}

fragment
out vec4 fragmentColor(sampler2D signedDistanceFieldTexture, vec2 vertexUv0, vec3 diffuseColor)
{
    float dist = texture(signedDistanceFieldTexture, vertexUv0).r;
	float width = fwidth(dist);
	float alpha = smoothstep(0.5-width, 0.5+width, dist);
	fragmentColor = vec4(diffuseColor, alpha);
}
